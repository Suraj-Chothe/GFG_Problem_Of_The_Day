'''Given an undirected graph with v vertices(numbered from 1 to v) and e edges. Find the number of good components in the graph.
A component of the graph is good if and only if the component is fully connected.
Note: A fully connected component is a subgraph of a given graph such that there's an edge between every pair of vertices in the component, the given graph can be a disconnected graph. 

Example 1:

Input: 


e=3 
v=3
edges={{1, 2},{1, 3},{3, 2}}
Output: 
1
Explanation: 
We can see that there is only one component in the graph and in this component there is a edge between any two vertces.
Example 2:

Input:

e=5 
v=7
edges={{1, 2},{7, 2},{3, 5},{3, 4},{4, 5}}
Output: 
2
Explanation: 
We can see that there are 3 components in the graph. For 1-2-7 there is no edge between 1 to 7, so it is not a fully connected component. Rest 2 are individually fully connected component.
Your Task:
You don't need to read input or print anything. Your task is to complete the function findNumberOfGoodComponent(), which takes an integer e and v and edges[][] 
as input parameters and returns an integer denoting the number of good components.

Expected Time Complexity: O(v+e)
Expected Auxiliary Space: O(depth of the graph)

Constraints:
1 <= edges[i][0], edges[i][1] <= v
1 ≤ v, e ≤ 104
All edges are unique'''


#include <vector>
using namespace std;

class Solution {
public:
    // Depth-First Search (DFS) to traverse the graph and count vertices and edges in a component
    void dfs(int v, vector<bool> &visited, const vector<vector<int>> &adj, int &vertices, int &edges) {
        visited[v] = true;
        ++vertices; // Count the visited vertex
        for (int neighbor : adj[v]) {
            ++edges; // Count the edge
            if (!visited[neighbor]) {
                dfs(neighbor, visited, adj, vertices, edges);
            }
        }
    }

    int findNumberOfGoodComponent(int e, int v, vector<vector<int>> &edges) {
        // Create adjacency list representation of the graph
        vector<vector<int>> adj(v + 1);
        for (const auto& edge : edges) {
            int u = edge[0];
            int w = edge[1];
            adj[u].push_back(w);
            adj[w].push_back(u);
        }

        // Initialize visited array
        vector<bool> visited(v + 1, false);

        // Count the number of good components
        int goodComponents = 0;
        for (int i = 1; i <= v; ++i) {
            if (!visited[i]) {
                int vertices = 0;
                int edges = 0;
                dfs(i, visited, adj, vertices, edges);
                // Check if the component is fully connected
                if (edges == vertices * (vertices - 1)) {
                    ++goodComponents;
                }
            }
        }

        return goodComponents;
    }
};
