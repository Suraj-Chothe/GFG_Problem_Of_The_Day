'''We have a horizontal number line. On that number line, we have gas stations at positions 
stations[0], stations[1], ..., stations[N-1], where n = size of the stations array. 
Now, we add k more gas stations so that d, the maximum distance between adjacent gas stations, is minimized. 
We have to find the smallest possible value of d. Find the answer exactly to 2 decimal places.'''



#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

class Solution {
public:
    double findSmallestMaxDist(vector<int>& stations, int k) {
        double low = 0;
        double high = stations.back() - stations.front();
        double precision = 1e-6;  // Define the precision to ensure accurate results

        auto isPossible = [&](double d) -> bool {
            int requiredStations = 0;
            for (int i = 1; i < stations.size(); ++i) {
                double gap = stations[i] - stations[i - 1];
                requiredStations += ceil(gap / d) - 1;
                if (requiredStations > k) {
                    return false;
                }
            }
            return requiredStations <= k;
        };

        while (high - low > precision) {
            double mid = (low + high) / 2;
            if (isPossible(mid)) {
                high = mid;
            } else {
                low = mid;
            }
        }

        return round(high * 100.0) / 100.0;  // Return the result rounded to 2 decimal places
    }
};
