'''Given an array arr[] of size n and an integer x, return 1 if there exists a pair of elements in the array whose absolute difference is x, otherwise, return -1.

Example 1:

Input:
n = 6
x = 78
arr[] = {5, 20, 3, 2, 5, 80}
Output:
1
Explanation:
Pair (2, 80) have absolute difference of 78.
Example 2:

Input:
n = 5
x = 45
arr[] = {90, 70, 20, 80, 50}
Output:
-1
Explanation:
There is no pair with absolute difference of 45.
Your Task:
You need not take input or print anything. Your task is to complete the function findPair() which takes integers n, x, and an array arr[] as input parameters and returns 1 if the required pair exists, return -1 otherwise.

Expected Time Complexity: O(n* Log(n)).
Expected Auxiliary Space: O(1).

Constraints:
1<=n<=10^6 
1<=arr[i]<=10^6 
0<=x<=10^5'''

from typing import List

class Solution:
    def findPair(self, n: int, x: int, arr: List[int]) -> int:
        # Sort the array
        arr.sort()
        
        # Initialize two pointers
        i, j = 0, 1
        
        # Traverse the array
        while i < n and j < n:
            # Calculate the current difference
            diff = arr[j] - arr[i]
            
            # If the difference is less than x, move the j pointer to the right
            if diff < x:
                j += 1
            # If the difference is greater than x, move the i pointer to the right
            elif diff > x:
                i += 1
            # If the difference is equal to x and i is not equal to j, we found a pair
            elif i != j:
                return 1
            # If i and j are the same, we need to move j to the right to avoid comparing the same element
            else:
                j += 1
        
        # If no such pair is found, return -1
        return -1
