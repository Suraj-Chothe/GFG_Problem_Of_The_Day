'''Given an array arr, partition it into two subsets(possibly empty) such that each element must belong to only one subset. Let the sum of the elements of these two subsets be S1 and S2. 
Given a difference d, count the number of partitions in which S1 is greater than or equal to S2 and the difference between S1 and S2 is equal to d. Since the answer may be large return it modulo 10^9 + 7.'''

from typing import List

class Solution:
    def countPartitions(self, n: int, d: int, arr: List[int]) -> int:
        MOD = 10**9 + 7
        total_sum = sum(arr)
        
        # Check if (total_sum + d) is even
        if (total_sum + d) % 2 != 0:
            return 0
        
        target_sum = (total_sum + d) // 2
        
        # Create a dp array initialized to 0
        dp = [0] * (target_sum + 1)
        dp[0] = 1  # There's one way to have sum 0: select no elements

        for num in arr:
            # Update the dp array in reverse order
            for j in range(target_sum, num - 1, -1):
                dp[j] = (dp[j] + dp[j - num]) % MOD

        return dp[target_sum]
