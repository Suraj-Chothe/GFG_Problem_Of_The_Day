'''

Given a singly linked list having n nodes containing english alphabets ('a'-'z'). 
Rearrange the linked list in such a way that all the vowels come before the consonants 
while maintaining the order of their arrival. 

Example 1:

Input:
n = 9
linked list: a -> b -> c -> d -> e -> f -> g -> h -> i 
Output: 
a -> e -> i -> b -> c -> d -> f -> g -> h
Explanation: 
After rearranging the input linked list according to the condition the resultant linked list
will be as shown in output.
Example 2:

Input:
n = 8
linked list: a -> b -> a -> b -> d -> e -> e -> d 
Output: 
a -> a -> e -> e -> b -> b -> d -> d
Explanation: 
After rearranging the input linked list according to the condition the resultant linked 
list will be as shown in output.
Your Task:
Your task is to complete the function arrangeCV(), which takes head of linked list
and arranges the list in such a way that all the vowels come before the consonants
while maintaining the order of their arrival and returns the head of the updated linked list.

Expected Time Complexity :  O(n)
Expected Auxiliary Space :  O(1)

Constraints:
1 <= n <= 104
'a' <= elements of linked list <= 'z'



'''


class Solution:
    #Function to reverse a linked list.
    def arrangeCV(self, head):
        # Function to check if a character is a vowel
        def is_vowel(char):
            return char in ['a', 'e', 'i', 'o', 'u']
        
        # Initialize two dummy nodes for vowels and consonants
        vowel_dummy = Node(None)
        consonant_dummy = Node(None)
        
        # Initialize pointers for vowels and consonants
        vowel_tail = vowel_dummy
        consonant_tail = consonant_dummy
        
        current = head
        while current:
            if is_vowel(current.data):
                vowel_tail.next = current
                vowel_tail = vowel_tail.next
            else:
                consonant_tail.next = current
                consonant_tail = consonant_tail.next
            current = current.next
        
        # Connect the two lists
        vowel_tail.next = consonant_dummy.next
        consonant_tail.next = None
        
        return vowel_dummy.next
