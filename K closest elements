'''Given a sorted array of unique elements in increasing order, arr[] of n integers, and a value x. Find the K closest elements to x in arr[].
Keep the following points in mind:

If x is present in the array, then it need not be considered.
If two elements have the same difference as x, the greater element is prioritized.
If sufficient elements are not present on the right side, take elements from the left and vice versa.
'''

#include <vector>
using namespace std;

class Solution {
public:
    vector<int> printKClosest(vector<int>& arr, int n, int k, int x) {
        // Find the crossover point
        int l = findCrossOver(arr, 0, n-1, x);
        int r = l+1; // Right index to search
        int count = 0; // To keep track of count of elements already printed

        // If x is present in arr[], then reduce left index
        // Assumption: all elements in arr[] are distinct
        if (arr[l] == x) l--;

        // Compare elements on left and right of crossover
        // point to find the k closest elements
        vector<int> result;
        while (l >= 0 && r < n && count < k) {
            if (x - arr[l] < arr[r] - x) 
                result.push_back(arr[l--]); 
            else
                result.push_back(arr[r++]); 
            count++; 
        }

        // If there are no more elements on right side, then
        // print left elements
        while (count < k && l >= 0) 
            result.push_back(arr[l--]), count++; 

        // If there are no more elements on left side, then
        // print right elements
        while (count < k && r < n) 
            result.push_back(arr[r++]), count++;

        return result;
    }
    
private:
    int findCrossOver(vector<int>& arr, int low, int high, int x) {
        // Base cases
        if (arr[high] <= x) // x is greater than all
            return high; 
        if (arr[low] > x) // x is smaller than all
            return low; 

        // Find the middle point
        int mid = (low + high) / 2; /* low + (high - low)/2 */

        /* If x is same as middle element, then return mid */
        if (arr[mid] <= x && arr[mid+1] > x) 
            return mid; 

        /* If x is greater than arr[mid], then either arr[mid + 1] 
            is ceiling of x or ceiling lies in arr[mid+1...high] */
        if (arr[mid] < x) 
            return findCrossOver(arr, mid+1, high, x); 

        return findCrossOver(arr, low, mid - 1, x); 
    }
};
